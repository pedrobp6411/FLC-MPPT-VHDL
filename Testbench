-- Testbench for fuzzy_mppt_controller with export to resultados.txt
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;
use STD.TEXTIO.ALL;

entity tb_fuzzy_export is
end tb_fuzzy_export;

architecture sim of tb_fuzzy_export is

    component fuzzy_mppt_controller
        Port (
            clk             : in  std_logic;
            reset           : in  std_logic;
            enable          : in  std_logic;
            current_in      : in  signed(15 downto 0);
            voltage_in      : in  signed(15 downto 0);
            duty_out        : out std_logic_vector(7 downto 0);
            store_valid     : out std_logic;
            error_out       : out integer;
            delta_e_out     : out integer;
            delta_duty_out  : out integer
        );
    end component;

    signal clk         : std_logic := '0';
    signal reset       : std_logic := '1';
    signal enable      : std_logic := '0';
    signal current_in  : signed(15 downto 0);
    signal voltage_in  : signed(15 downto 0);
    signal duty_out    : std_logic_vector(7 downto 0);
    signal store_valid : std_logic;
    signal error_out      : integer;
    signal delta_e_out    : integer;
    signal delta_duty_out : integer;

begin
    -- Instantiate UUT
    uut: fuzzy_mppt_controller
        port map (
            clk => clk,
            reset => reset,
            enable => enable,
            current_in => current_in,
            voltage_in => voltage_in,
            duty_out => duty_out,
            store_valid => store_valid,
            error_out => error_out,
            delta_e_out => delta_e_out,
            delta_duty_out => delta_duty_out
        );

    -- Clock generation
    clk_process : process
    begin
        clk <= '0'; wait for 10 ns;
        clk <= '1'; wait for 10 ns;
    end process;

    -- Stimulus and export process
    stim_proc : process
        file data_file     : text open read_mode is "dataset_scaled.txt";
        file result_file   : text open write_mode is "resultados.txt";
        variable line_buf  : line;
        variable out_line  : line;
        variable volt_val  : integer;
        variable curr_val  : integer;
        variable time_step : time := 0 ns;
    begin
        wait for 40 ns;
        reset <= '0';
        enable <= '1';

        while not endfile(data_file) loop
            readline(data_file, line_buf);
            read(line_buf, volt_val);
            read(line_buf, curr_val);

            voltage_in <= to_signed(volt_val, 16);
            current_in <= to_signed(curr_val, 16);

            wait for 20 ns;
            if store_valid = '1' then
                -- Removed write(out_line, now); and its trailing space
                write(out_line, volt_val);
                write(out_line, string'(" "));
                write(out_line, curr_val);
                write(out_line, string'(" "));
                write(out_line, to_integer(unsigned(duty_out)));
                write(out_line, string'(" "));
                write(out_line, error_out);
                write(out_line, string'(" "));
                write(out_line, delta_e_out);
                write(out_line, string'(" "));
                write(out_line, delta_duty_out);
                writeline(result_file, out_line);
            end if;
        end loop;

        wait for 100 ns;
        enable <= '0';
        wait until false;
    end process;

end sim;
